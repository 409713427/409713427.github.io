<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Linux安装插件系列】Linux安装配置mysql8.0</title>
      <link href="/2021/102036523.html"/>
      <url>/2021/102036523.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux-CentOS7安装mysql8-0"><a href="#Linux-CentOS7安装mysql8-0" class="headerlink" title="Linux-CentOS7安装mysql8.0"></a>Linux-CentOS7安装mysql8.0</h1><p>密码策略： <a href="https://blog.csdn.net/Hello_World_QWP/article/details/79551789" target="_blank" rel="noopener">https://blog.csdn.net/Hello_World_QWP/article/details/79551789</a></p><h3 id="CentOS7安装mysql8-0步骤"><a href="#CentOS7安装mysql8-0步骤" class="headerlink" title="CentOS7安装mysql8.0步骤"></a>CentOS7安装mysql8.0步骤</h3><p>1.1 安装前清理工作,第一次安装请忽略；<br> 1.1.1 清理原有的mysql数据库；<br> 使用以下命令查找出安装的mysql软件包和依赖包：</p><pre class=" language-undefined"><code class="language-undefined">rpm -pa | grep mysql</code></pre><p>显示结果如下：</p><pre class=" language-css"><code class="language-css">mysql<span class="token number">80</span>-community-release-el<span class="token number">7</span>-<span class="token number">1.</span>noarchmysql-community-server-<span class="token number">8.0.11</span>-<span class="token number">1.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span>mysql-community-common-<span class="token number">8.0.11</span>-<span class="token number">1.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span>mysql-community-libs-<span class="token number">8.0.11</span>-<span class="token number">1.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span>mysql-community-client-<span class="token number">8.0.11</span>-<span class="token number">1.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span>使用以下命令依次删除上面的程序yum remove mysql-xxx-xxx-</code></pre><p>删除mysql的配置文件，卸载不会自动删除配置文件，首先使用如下命令查找出所用的配置文件；</p><pre class=" language-swift"><code class="language-swift"><span class="token builtin">find</span> <span class="token operator">/</span> <span class="token operator">-</span>name mysql</code></pre><p>可能的显示结果如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">/</span>etc<span class="token operator">/</span>logrotate<span class="token punctuation">.</span>d<span class="token operator">/</span>mysql<span class="token operator">/</span>etc<span class="token operator">/</span>selinux<span class="token operator">/</span>targeted<span class="token operator">/</span>active<span class="token operator">/</span>modules<span class="token operator">/</span><span class="token number">100</span><span class="token operator">/</span>mysql<span class="token operator">/</span>etc<span class="token operator">/</span>selinux<span class="token operator">/</span>targeted<span class="token operator">/</span>tmp<span class="token operator">/</span>modules<span class="token operator">/</span><span class="token number">100</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>mysql<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mysql</code></pre><p>根据需求使用以下命令 依次 对配置文件进行删除</p><pre class=" language-csharp"><code class="language-csharp">rm <span class="token operator">-</span>rf <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql</code></pre><h3 id="1-1-2-删除MariaDB的文件，"><a href="#1-1-2-删除MariaDB的文件，" class="headerlink" title="1.1.2 删除MariaDB的文件，"></a>1.1.2 删除MariaDB的文件，</h3><p>由于MySQL在CentOS7中收费了，所以已经不支持MySQL了，取而代之在CentOS7内部集成了mariadb，而安装MySQL的话会和MariaDB的文件冲突，所以需要先卸载掉MariaDB.</p><p>使用rpm 命令查找出要删除的mariadb文件；</p><pre class=" language-bash"><code class="language-bash">rpm -pa <span class="token operator">|</span> <span class="token function">grep</span> mariadb可能的显示结果如下：mariadb-libs-5.5.56-2.el7.x86_64  rpm -e mariadb-libs-5.5.56-2.el7.x86_64 <span class="token comment" spellcheck="true">#删除上面的程序</span></code></pre><p>可能出现错误提示如下：</p><p>依赖检测失败：</p><pre class=" language-css"><code class="language-css">libmysqlclient<span class="token number">.</span>so<span class="token number">.18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">64</span>bit<span class="token punctuation">)</span> 被 <span class="token punctuation">(</span>已安裝<span class="token punctuation">)</span> <span class="token property">postfix-2</span><span class="token punctuation">:</span><span class="token number">2.10.1</span>-<span class="token number">6.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span> 需要libmysqlclient<span class="token number">.</span>so<span class="token number">.18</span><span class="token punctuation">(</span>libmysqlclient_<span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">64</span>bit<span class="token punctuation">)</span> 被 <span class="token punctuation">(</span>已安裝<span class="token punctuation">)</span> <span class="token property">postfix-2</span><span class="token punctuation">:</span><span class="token number">2.10.1</span>-<span class="token number">6.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span> 需要libmysqlclient<span class="token number">.</span>so<span class="token number">.18</span><span class="token punctuation">(</span>libmysqlclient_<span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">64</span>bit<span class="token punctuation">)</span> 被 <span class="token punctuation">(</span>已安裝<span class="token punctuation">)</span> <span class="token property">postfix-2</span><span class="token punctuation">:</span><span class="token number">2.10.1</span>-<span class="token number">6.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span> 需要</code></pre><p>使用强制删除：</p><pre class=" language-css"><code class="language-css">rpm -e --nodeps mariadb-libs-<span class="token number">5.5.56</span>-<span class="token number">2.</span>el<span class="token number">7.</span>x<span class="token number">86</span>_<span class="token number">64</span></code></pre><p>至此就将原来有的mysql 和mariadb数据库删除了；</p><h1 id="1-2-安装mysql"><a href="#1-2-安装mysql" class="headerlink" title="1.2 安装mysql"></a>1.2 安装mysql</h1><p>1.2.1 下面mysql官网提供的mysql repo源<br> centos的yum 源中默认是没有mysql的，所以我们需要先去官网下载mysql的repo源并安装；</p><p>mysql官网下载链接：mysql repo下载地址 如下：<a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p><h3 id="1-2-2-下载软件包rpm文件"><a href="#1-2-2-下载软件包rpm文件" class="headerlink" title="1.2.2 下载软件包rpm文件"></a>1.2.2 下载软件包rpm文件</h3><p>文件下载到home/wst/Documents/mysql8.0文件夹下；</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> home/wst/Documents<span class="token function">mkdir</span> mysql8.0<span class="token function">cd</span> mysql8.0<span class="token function">wget</span>  https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm</code></pre><h3 id="1-2-3-安装-yum-repo文件并更新-yum-缓存；"><a href="#1-2-3-安装-yum-repo文件并更新-yum-缓存；" class="headerlink" title="1.2.3 安装 yum repo文件并更新 yum 缓存；"></a>1.2.3 安装 yum repo文件并更新 yum 缓存；</h3><pre class=" language-css"><code class="language-css">rpm -ivh mysql<span class="token number">80</span>-community-release-el<span class="token number">7</span>-<span class="token number">1.</span>noarch<span class="token number">.</span>rpm</code></pre><p>执行结果：</p><p>会在/etc/yum.repos.d/目录下生成两个repo文件mysql-community.repo mysql-community-source.repo</p><p>更新 yum 命令</p><pre class=" language-undefined"><code class="language-undefined">yum clean allyum makecache</code></pre><h3 id="1-2-4-使用-yum安装mysql"><a href="#1-2-4-使用-yum安装mysql" class="headerlink" title="1.2.4 使用 yum安装mysql"></a>1.2.4 使用 yum安装mysql</h3><p>当我们在使用yum安装mysql时，yum默认会从yum仓库中安装mysql最新的GA版本；如何选择自己的版本；</p><p>第一步： 查看mysql yum仓库中mysql版本，使用如下命令</p><pre class=" language-undefined"><code class="language-undefined">yum repolist all | grep mysql</code></pre><p>可以看到 MySQL 5.5 5.6 5.7为禁用状态 而MySQL 8.0为启用状态；</p><p>第二步 使用 yum-config-manager 命令修改相应的版本为启用状态最新版本为禁用状态，根据需要安装的版本修改</p><pre class=" language-bash"><code class="language-bash">yum-config-manager --disable mysql80-community <span class="token comment" spellcheck="true">#关闭8.0版本</span>yum-config-manager --enable mysql57-community <span class="token comment" spellcheck="true">#开启5.7版本</span></code></pre><p>或者可以编辑 mysql repo文件，</p><pre class=" language-undefined"><code class="language-undefined">cat /etc/yum.repos.d/mysql-community.repo </code></pre><p>将相应版本下的enabled改成 1 即可；</p><h3 id="1-2-5-安装mysql-命令如下："><a href="#1-2-5-安装mysql-命令如下：" class="headerlink" title="1.2.5 安装mysql 命令如下："></a>1.2.5 安装mysql 命令如下：</h3><pre class=" language-undefined"><code class="language-undefined">yum install mysql-community-server</code></pre><h3 id="1-2-6-开启mysql-服务"><a href="#1-2-6-开启mysql-服务" class="headerlink" title="1.2.6 开启mysql 服务"></a>1.2.6 开启mysql 服务</h3><pre class=" language-css"><code class="language-css">systemctl start mysqld<span class="token number">.</span>service</code></pre><h3 id="1-2-7-获取初始密码登录mysql"><a href="#1-2-7-获取初始密码登录mysql" class="headerlink" title="1.2.7 获取初始密码登录mysql"></a>1.2.7 获取初始密码登录mysql</h3><p>mysql在安装后会创建一个root@locahost账户，并且把初始的密码放到了/var/log/mysqld.log文件中；</p><pre class=" language-cpp"><code class="language-cpp">cat <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>log <span class="token operator">|</span> grep password</code></pre><p>使用初始密码登录mysql</p><p>jKw)wB/&lt;X4?z</p><pre class=" language-bash"><code class="language-bash">mysql -u root -p  <span class="token comment" spellcheck="true">#会提示输入密码</span></code></pre><h3 id="修改初始密码："><a href="#修改初始密码：" class="headerlink" title="修改初始密码："></a>修改初始密码：</h3><pre class=" language-bash"><code class="language-bash">ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'MyNewPass4!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#注意位数和种类至少大+写+小写+符号+数字</span></code></pre><h3 id="忘记密码重置密码"><a href="#忘记密码重置密码" class="headerlink" title="忘记密码重置密码"></a>忘记密码重置密码</h3><p>[重置密码解决MySQL for Linux错误 ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)]</p><pre class=" language-bash"><code class="language-bash">vim /etc/my.cnf <span class="token comment" spellcheck="true">#注：windows下修改的是my.ini</span>skip-grant-tables<span class="token comment" spellcheck="true"># 在[mysqld]后面任意一行添加skip-grant-tables用来跳过密码验证的过程;设置完密码记得删除</span>systemctl restart mysqld.service <span class="token comment" spellcheck="true">#重启mysql ，就可以免密码登陆了，然后进行修改密码</span></code></pre><h3 id="1-2-8-在防火墙中开启3306端口"><a href="#1-2-8-在防火墙中开启3306端口" class="headerlink" title="1.2.8 在防火墙中开启3306端口"></a>1.2.8 在防火墙中开启3306端口</h3><p>CentOS7默认使用的是firewall作为防火墙，我这里改为习惯常用的iptables防火墙</p><p>第一步：开启firewall3306端口防火墙</p><pre class=" language-csharp"><code class="language-csharp">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>list<span class="token operator">-</span>ports 查看所有打开的端口firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent    开启一个端口，添加<span class="token operator">--</span>permanent永久生效，没有此参数重启后失效firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>permanent <span class="token operator">--</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp  开放端口<span class="token number">80</span>firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>permanent <span class="token operator">--</span><span class="token keyword">remove</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp   移除端口<span class="token number">80</span>firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reload   重启防火墙，修改后重启防火墙生效</code></pre><p>第五步： 重启防火墙</p><pre class=" language-css"><code class="language-css">systemctl enable iptables<span class="token number">.</span>servicesystemctl start iptables<span class="token number">.</span>service</code></pre><p>1.2.9 将mysql 服务加入开机启动项，并启动mysql进程</p><pre class=" language-css"><code class="language-css">systemctl enable mysqld<span class="token number">.</span>servicesystemctl start mysqld<span class="token number">.</span>service</code></pre><p>常用mysql服务命令：</p><pre class=" language-csharp"><code class="language-csharp">mysql <span class="token operator">-</span>u username <span class="token operator">-</span>p #登录mysqlquit #退出mysql systemctl start mysqld<span class="token punctuation">.</span>service  #启动mysqlsystemctl stop mysqld<span class="token punctuation">.</span>service #结束systemctl restart mysqld<span class="token punctuation">.</span>service #重启systemctl enable mysqld<span class="token punctuation">.</span>service #开机自启<span class="token keyword">select</span> <span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> #查看mysql版本</code></pre><h1 id="2-1-开启mysql远程服务："><a href="#2-1-开启mysql远程服务：" class="headerlink" title="2.1 开启mysql远程服务："></a>2.1 开启mysql远程服务：</h1><p>外网 Navicat 连接 Mysql</p><h3 id="2-1-1-修改mysql数据库下的user表中host的值"><a href="#2-1-1-修改mysql数据库下的user表中host的值" class="headerlink" title="2.1.1 修改mysql数据库下的user表中host的值"></a>2.1.1 修改mysql数据库下的user表中host的值</h3><p>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”登录mysql数据库 执行如下命令：</p><pre class=" language-bash"><code class="language-bash">mysql -u root -puse mysql<span class="token punctuation">;</span>update user <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><h3 id="2-1-2-使用授权的方式"><a href="#2-1-2-使用授权的方式" class="headerlink" title="2.1.2 使用授权的方式"></a>2.1.2 使用授权的方式</h3><p>赋予任何主机访问数据的权限</p><pre class=" language-rust"><code class="language-rust">mysql<span class="token operator">></span> GRANT ALL PRIVILEGES ON <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> TO <span class="token string">'root'</span><span class="token operator">@</span><span class="token string">'%'</span>WITH GRANT OPTION<span class="token punctuation">;</span>mysql<span class="token operator">></span>FLUSH PRIVILEGES</code></pre><p>如果想myuser用户使用mypassword密码从任何主机连接到mysql服务器的话。</p><pre class=" language-rust"><code class="language-rust">GRANT ALL PRIVILEGES ON <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> TO <span class="token string">'myuser'</span><span class="token operator">@</span><span class="token string">'%'</span>IDENTIFIED BY <span class="token string">'mypassword'</span> WITH GRANT OPTION<span class="token punctuation">;</span></code></pre><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码</p><pre class=" language-rust"><code class="language-rust">GRANT ALL PRIVILEGES ON <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> TO <span class="token string">'myuser'</span><span class="token operator">@</span><span class="token string">'192.168.1.3'</span>IDENTIFIED BY <span class="token string">'mypassword'</span> WITH GRANT OPTION<span class="token punctuation">;</span></code></pre><h3 id="2-2-在使用-Navicat-for-Mysql连接mysql-8-0时会报如下错误："><a href="#2-2-在使用-Navicat-for-Mysql连接mysql-8-0时会报如下错误：" class="headerlink" title="2.2 在使用 Navicat for Mysql连接mysql 8.0时会报如下错误："></a>2.2 在使用 Navicat for Mysql连接mysql 8.0时会报如下错误：</h3><p>Authentication plugin ‘caching_sha2_password’ cannot be loaded:</p><p>mysql8.0 引入了新特性 caching_sha2_password；这种密码加密方式客户端不支持；客户端支持的是mysql_native_password 这种加密方式；</p><p>我们可可以查看mysql 数据库中user表的 plugin字段；</p><p>可以使用命令将他修改成mysql_native_password加密模式：</p><pre class=" language-bash"><code class="language-bash">update user <span class="token keyword">set</span> plugin<span class="token operator">=</span><span class="token string">'mysql_native_password'</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><p>再用Navicat链接 就可以链接成功；</p><hr><p>安装过程中涉及到的Linux命令学习；<br> 3.1 rpm</p><p>3.2 putty 上传文件 pscp命令；</p><pre class=" language-dart"><code class="language-dart">在window机上CD进入pttty安装目录：</code></pre><pre class=" language-bash"><code class="language-bash">    <span class="token function">cd</span> :\program files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\Putty</code></pre><pre class=" language-dart"><code class="language-dart">将本地文件拷贝到Linux上：pscp 文件 用户名<span class="token metadata symbol">@LinuxIP</span><span class="token punctuation">:</span>目录</code></pre><pre class=" language-ruby"><code class="language-ruby">    pscp hello<span class="token punctuation">.</span>txt root@<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">145.135</span><span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token regex">/userfile/</span></code></pre><pre class=" language-dart"><code class="language-dart">将本地文件夹 拷贝到Linux上：pscp  <span class="token operator">-</span>r 目录 用户名<span class="token metadata symbol">@LinuxIP</span><span class="token punctuation">:</span>目录</code></pre><pre class=" language-ruby"><code class="language-ruby">   pscp <span class="token operator">-</span>r c<span class="token punctuation">:</span>\file root@<span class="token number">10.43</span><span class="token punctuation">.</span><span class="token number">65.98</span><span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token operator">/</span>testFolder  </code></pre><pre class=" language-css"><code class="language-css">将Linux上的文件\root\test<span class="token number">.</span>txt拷贝到本地C盘src文件夹，如下：</code></pre><pre class=" language-ruby"><code class="language-ruby">   pscp root<span class="token variable">@abc_pc</span><span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token operator">/</span>test<span class="token punctuation">.</span>txt  <span class="token constant">C</span><span class="token punctuation">:</span>\src  </code></pre><p>3.3 修改防火墙文件/etc/sysconfig/iptables</p><p>3.4 systemctl命令</p><p>授权外网登陆<br> 1。 改表法。</p><p>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改成”%”</p><p>Sql代码</p><pre class=" language-csharp"><code class="language-csharp">  <span class="token number">1</span><span class="token punctuation">.</span> mysql <span class="token operator">-</span>u root <span class="token operator">-</span>pvmwaremysql<span class="token operator">></span>use mysql<span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">.</span> mysql<span class="token operator">></span>update user <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">.</span> mysql<span class="token operator">></span><span class="token keyword">select</span> host<span class="token punctuation">,</span> user <span class="token keyword">from</span> user<span class="token punctuation">;</span> </code></pre><ol><li>授权法。</li></ol><p>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。</p><p>Sql代码</p><pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'myuser'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'mypassword'</span> WITHGRANT OPTION<span class="token punctuation">;</span>  FLUSH   PRIVILEGES<span class="token punctuation">;</span> </code></pre><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码</p><p>Sql代码</p><pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON dk.* TO <span class="token string">'myuser'</span>@<span class="token string">'192.168.1.3'</span> IDENTIFIED BY <span class="token string">'mypassword'</span> WITH GRANT OPTION<span class="token punctuation">;</span> FLUSH   PRIVILEGES<span class="token punctuation">;</span> </code></pre><p>注意授权后必须FLUSH PRIVILEGES;否则无法立即生效。</p><p>3<br> 另外一种方法.</p><p>在安装mysql的机器上运行：</p><pre class=" language-undefined"><code class="language-undefined">1、d:\mysql\bin\>mysql -h localhost -u root </code></pre><p>//这样应该可以进入MySQL服务器</p><pre class=" language-bash"><code class="language-bash">2、mysql<span class="token operator">></span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTION </code></pre><p>//赋予任何主机访问数据的权限</p><pre class=" language-undefined"><code class="language-undefined">3、mysql>FLUSH PRIVILEGES </code></pre><p>//修改生效</p><pre class=" language-php"><code class="language-php"><span class="token number">4</span>、mysql<span class="token operator">></span><span class="token constant">EXIT</span> </code></pre><p>//退出MySQL服务器</p><p>这样就可以在其它任何的主机上以root身份登录啦！</p><p>其它：</p><pre class=" language-csharp"><code class="language-csharp">mysql<span class="token operator">></span> grant all privileges on <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token string">'energy_pf'</span><span class="token string">@'192.168.2.65'</span> identified by <span class="token string">'energy_pf'</span> with grant option<span class="token punctuation">;</span></code></pre><p>Query OK, 0 rows affected (0.00 sec)</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> plush privileges<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#立即生效</span></code></pre><p>允许用户energy_pf从ip为192.168.2.65的主机连接到mysql服务器的任意数据库（*.*），并使用energy_pf作为密码</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安装插件系列】Linux安装配置jdk1.8</title>
      <link href="/2021/102036523.html"/>
      <url>/2021/102036523.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux安装jdk1-8"><a href="#Linux安装jdk1-8" class="headerlink" title="Linux安装jdk1.8"></a>Linux安装jdk1.8</h1><p>第一次再Linux安装jdk并且配置环境,为了以后查看,在这里记录一下.</p><p>linux 下安装jdk和windows下的安装是一样的，之前在windows安装的时候是先下载压缩包，然后再配置环境变量。其实在linux下也是一样的。</p><h3 id="第一步：创建jdk安装目录-该-usr-local-src-目录是空的-最好把我们自己下载的放到这-容易区分"><a href="#第一步：创建jdk安装目录-该-usr-local-src-目录是空的-最好把我们自己下载的放到这-容易区分" class="headerlink" title="第一步：创建jdk安装目录(该/usr/local/src 目录是空的,最好把我们自己下载的放到这,容易区分)"></a>第一步：创建jdk安装目录(该/usr/local/src 目录是空的,最好把我们自己下载的放到这,容易区分)</h3><pre class=" language-bash"><code class="language-bash">命令： <span class="token function">mkdir</span> -p /usr/local/src/jdk</code></pre><h3 id="第二步：查看安装程序"><a href="#第二步：查看安装程序" class="headerlink" title="第二步：查看安装程序"></a>第二步：查看安装程序</h3><pre class=" language-bash"><code class="language-bash">命令：rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> -i jdk</code></pre><p>　　 若之前安装过jdk，下次安装一定把之前的删除干净</p><h3 id="第三步：下载jdk包需要联网，下载也需要点时间）"><a href="#第三步：下载jdk包需要联网，下载也需要点时间）" class="headerlink" title="第三步：下载jdk包需要联网，下载也需要点时间）"></a>第三步：下载jdk包需要联网，下载也需要点时间）</h3><p>此次使用的为后缀为tar.gz的文件（不需要安装），如jdk-8u131-linux-x64.tar.gz</p><pre class=" language-bash"><code class="language-bash">安装指令: <span class="token punctuation">[</span>root@master wst<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" </span> http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz</code></pre><p>注意：如果上面wget命令不能用,报错：-bash: wget: command not found。执行一下该命令(安装依赖包) yum -y install wget</p><p>   　　  注意 : 记住需要加上：–no-check-certificate –no-cookies –header “Cookie: oraclelicense=accept-securebackup-cookie”    这段是为了避开用户验证用的</p><h3 id="第四步：解压"><a href="#第四步：解压" class="headerlink" title="第四步：解压"></a>第四步：解压</h3><pre class=" language-bash"><code class="language-bash">解压命令 <span class="token keyword">:</span> <span class="token function">tar</span> -zxvf jdk-8u131-linux-x64.tar.gz</code></pre><p>  　　    系统会生成一个名为：jdk1.8.0_131 的文件夹。可以使用mv命令自定义文件名。</p><pre class=" language-bash"><code class="language-bash">更改文件夹名称 <span class="token keyword">:</span> <span class="token function">mv</span> jdk1.8.0_131  jdk1.8</code></pre><p><a href="https://imgtu.com/i/5BQqiQ" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BQqiQ.png" alt="5BQqiQ.png"></a></p><p> 　　第五步：配置环境变量</p><pre class=" language-bash"><code class="language-bash">　　 编辑配置文件: <span class="token function">vi</span> /etc/profile</code></pre><p>可以看到这个文件的内容，profile文件有点类似于windows系统里面的环境变量的配置，</p><p>　　  <strong>shift + g 定位到最后一行</strong></p><p>　　  <strong>这个时候按一下a或i键，进入编辑模式</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/src/jdk/jdk1.8<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</code></pre><p><a href="https://imgtu.com/i/5BQHIg" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BQHIg.jpg" alt="5BQHIg.jpg"></a></p><h3 id="第六步：退出文件，保存"><a href="#第六步：退出文件，保存" class="headerlink" title="第六步：退出文件，保存"></a>第六步：退出文件，保存</h3><p>​        按Esc键   输入:wq   保存并退出</p><h3 id="第七步：让配置文件生效"><a href="#第七步：让配置文件生效" class="headerlink" title="第七步：让配置文件生效"></a>第七步：让配置文件生效</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># source /etc/profile</span></code></pre><h3 id="第八步：查看是否配置成功"><a href="#第八步：查看是否配置成功" class="headerlink" title="第八步：查看是否配置成功"></a>第八步：查看是否配置成功</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master wst<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># java -version </span></code></pre><p>　　　　若出现jdk版本号，则安装并配置环境变量成功</p><p><a href="https://imgtu.com/i/5BQ7dS" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BQ7dS.jpg" alt="5BQ7dS.jpg"></a></p><p>​            如果提示命令找不到的话，查看一下jdk的配置路径是否错误。</p><p>   　　</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安装插件系列】Linux安装配置tomcat9.0</title>
      <link href="/2021/102036523.html"/>
      <url>/2021/102036523.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux服务器上安装tomcat"><a href="#Linux服务器上安装tomcat" class="headerlink" title="Linux服务器上安装tomcat"></a>Linux服务器上安装tomcat</h1><p> 安装软件 ： apache-tomcat-9.0.0.M1.tar.gz（下载地址<a href="http://tomcat.apache.org/%EF%BC%89" target="_blank" rel="noopener">http://tomcat.apache.org/）</a></p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>　　Tomcat是其中一个开源的且免费的java Web服务器，是Apache软件基金会的项目，所以安装Tomcat之前要安装java JDk，请参照<a href="https://409713427.github.io/2021/102036523.html">Linux安装jdk1.8</a></p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>　　下载Tomcat9</p><p>​    <a href="https://imgtu.com/i/5Bwrp6" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5Bwrp6.jpg" alt="5Bwrp6.jpg"></a></p><pre><code>将文件移动到apache-tomcat-9.0.0.M1.tar.gz移动到/usr/tomcat/下，并解压：</code></pre><p><a href="https://imgtu.com/i/5Bws1K" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5Bws1K.jpg" alt="5Bws1K.jpg"></a></p><pre class=" language-bash"><code class="language-bash">解压命令 <span class="token keyword">:</span> <span class="token function">tar</span> -xzvf apache-tomcat-10.0.12.tar.gz </code></pre><p>   <a href="https://imgtu.com/i/5Bw0t1" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5Bw0t1.jpg" alt="5Bw0t1.jpg"></a></p><p>并修改文件名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> apache-tomcat-10.0.12 apache-tomcat-10.0.12-8082</code></pre><p>　　再次解压apache-tomcat-10.0.12.tar.gz 文件，并修改解压后的文件价名为apache-tomcat-10.0.12-8082，得到　</p><p>​    <a href="https://imgtu.com/i/5BwBfx" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BwBfx.jpg" alt="5BwBfx.jpg"></a></p><p>步骤三</p><p>　　修改端口，分别修改tomcat里面conf/server.xml</p><p>server.xml文件中有三个端口设置</p><p>　　</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Server port<span class="token operator">=</span><span class="token string">"8005"</span> shutdown<span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span> ：关闭时使用　　<span class="token operator">&lt;</span>Connector port<span class="token operator">=</span><span class="token string">"8080"</span> protocol<span class="token operator">=</span><span class="token string">"HTTP/1.1"</span> connectionTimeout<span class="token operator">=</span><span class="token string">"20000"</span> redirectPort<span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span> ： 一般应用使用　　<span class="token operator">&lt;</span>Connector port<span class="token operator">=</span><span class="token string">"8009"</span> protocol<span class="token operator">=</span><span class="token string">"AJP/1.3"</span> redirectPort<span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>：为AJP端口，即容器使用，如 APACHE能通过AJP协议访问Tomcat的8009端口</code></pre><p>　　第一个80的tomcat的三个端口分别修改为：8005/80/8009</p><p>　　第二个8082的tomcat的三个端口分别修改为：7082/8082/9082</p><p>步骤四</p><p>　　启动tomcat，分别进入tomcat里面的bin目录</p><p>　　执行： ./startup.sh  –&gt;启动tomcat</p><p>　　执行： ./shutdown.sh –&gt;关闭tomcat</p><p>　　浏览器中输入：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://ip:80</a> 和<a href="http://localhost:8090/" target="_blank" rel="noopener">http://</a><a href="http://localhost:8080/" target="_blank" rel="noopener">ip</a><a href="http://localhost:8090/" target="_blank" rel="noopener">:80</a>82（ip指服务器的IP地址），即可访问不同的tomcat</p><p><a href="https://imgtu.com/i/5B0dKS" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5B0dKS.jpg" alt="5B0dKS.jpg"></a></p><p><a href="https://imgtu.com/i/5BBCGt" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BBCGt.jpg" alt="5BBCGt.jpg"></a></p><p>步骤五</p><p>　　设置tomcat开机启动</p><p>　　1、找到/etc文件夹下的rc.local文件（有的是在/etc/rc.d文件夹下），在文件的最后添加以下java环境变量和启动tomcat命令：</p><p>　</p><pre class=" language-bash"><code class="language-bash">　<span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/home/wst/jdk1.8  <span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre　sh /home/wst/Documents/tomcat10/apache-tomcat-10.0.12-80/bin/startup.sh（启动命令，可以配置条）</code></pre><p> <img src="https://img2018.cnblogs.com/blog/997648/201810/997648-20181011102318788-1124306211.png" alt="img"></p><p><a href="https://imgtu.com/i/5BwwkR" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/10/20/5BwwkR.jpg" alt="5BwwkR.jpg"></a></p><p>　保存退出 :wq</p><p>　　2、给rc.local文件添加执行权限</p><pre class=" language-bash"><code class="language-bash">　<span class="token function">chmod</span> +x rc.local</code></pre><p>　　 3、重启服务器，即可访问Tomcat</p><pre class=" language-bash"><code class="language-bash"><span class="token function">reboot</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础【抽象类，接口、代码块、final、单例、枚举】</title>
      <link href="/2021/091936523.html"/>
      <url>/2021/091936523.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java基础【抽象类，接口、代码块、final、单例、枚举】"><a href="#java基础【抽象类，接口、代码块、final、单例、枚举】" class="headerlink" title="java基础【抽象类，接口、代码块、final、单例、枚举】"></a>java基础【抽象类，接口、代码块、final、单例、枚举】</h1><h1 id="第一章-抽象类"><a href="#第一章-抽象类" class="headerlink" title="第一章 抽象类"></a>第一章 抽象类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-抽象类引入"><a href="#1-1-1-抽象类引入" class="headerlink" title="1.1.1 抽象类引入"></a>1.1.1 抽象类引入</h3><p>父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类完全只需要提供一个没有方法体的方法签名即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h2 id="1-2-abstract使用格式"><a href="#1-2-abstract使用格式" class="headerlink" title="1.2 abstract使用格式"></a>1.2 abstract使用格式</h2><p><strong>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><h3 id="1-2-1-抽象方法"><a href="#1-2-1-抽象方法" class="headerlink" title="1.2.1 抽象方法"></a>1.2.1 抽象方法</h3><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><pre class=" language-java"><code class="language-java">修饰符 <span class="token keyword">abstract</span> 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>；</code></pre><p>代码举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；</code></pre><h3 id="1-2-2-抽象类"><a href="#1-2-2-抽象类" class="headerlink" title="1.2.2 抽象类"></a>1.2.2 抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong></p><p>定义格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名字 <span class="token punctuation">{</span>   <span class="token punctuation">}</span></code></pre><p>代码举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span></code></pre><h3 id="1-2-3-抽象类的使用"><a href="#1-2-3-抽象类的使用" class="headerlink" title="1.2.3 抽象类的使用"></a>1.2.3 抽象类的使用</h3><p><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><p>代码举例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类,抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 抽象方法</span>    <span class="token comment" spellcheck="true">// 抽象方法必须要放在抽象类中</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个子类继承抽象类</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.重写父类的抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"管理其他人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个子类继承抽象类</span><span class="token keyword">class</span> <span class="token class-name">Cook</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Cook</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"厨师炒菜多加点盐..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建抽象类,抽象类不能创建对象</span>        <span class="token comment" spellcheck="true">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span><span class="token comment" spellcheck="true">//        Employee e = new Employee();</span><span class="token comment" spellcheck="true">//        e.work();</span>                <span class="token comment" spellcheck="true">// 3.创建子类</span>        Manager m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Cook c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cook</span><span class="token punctuation">(</span><span class="token string">"ap002"</span><span class="token punctuation">,</span> <span class="token string">"库克"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h2 id="1-3-抽象类的特征"><a href="#1-3-抽象类的特征" class="headerlink" title="1.3 抽象类的特征"></a>1.3 抽象类的特征</h2><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><p>其他成员（构造器，实例方法，静态方法等）抽象类都是具备的。</p><h2 id="1-4-抽象类的注意事项"><a href="#1-4-抽象类的注意事项" class="headerlink" title="1.4 抽象类的注意事项"></a>1.4 抽象类的注意事项</h2><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造器，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><h2 id="1-5-抽象类存在的意义"><a href="#1-5-抽象类存在的意义" class="headerlink" title="1.5 抽象类存在的意义"></a>1.5 抽象类存在的意义</h2><p>抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义，<strong>抽象类体现的是模板思想</strong>，模板是通用的东西抽象类中已经是具体的实现（抽象类中可以有成员变量和实现方法），而模板中不能决定的东西定义成抽象方法，让使用模板（继承抽象类的类）的类去重写抽象方法实现需求，这是典型的模板思想。</p><h2 id="1-6-第一个设计模式：模板模式"><a href="#1-6-第一个设计模式：模板模式" class="headerlink" title="1.6 第一个设计模式：模板模式"></a>1.6 第一个设计模式：模板模式</h2><p>我们现在使用抽象类设计一个模板模式的应用，例如在小学的时候，我们经常写作文，通常都是有模板可以套用的。假如我现在需要定义新司机和老司机类，新司机和老司机都有开车功能，开车的步骤都一样，只是驾驶时的姿势有点不同，<code>新司机:开门,点火,双手紧握方向盘,刹车,熄火</code>，<code>老司机:开门,点火,右手握方向盘左手抽烟,刹车,熄火</code>。我们可以将固定流程写到父类中，不同的地方就定义成抽象方法，让不同的子类去重写，代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 司机开车的模板类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开车姿势不确定?定义为抽象方法</span>        <span class="token function">ziShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"刹车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"熄火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">ziShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在定义两个使用模板的司机：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewDriver</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ziShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新司机双手紧握方向盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldDriver</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ziShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老司机右手握方向盘左手抽烟..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NewDriver nd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nd<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OldDriver od <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OldDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        od<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>可以看出，模板模式的优势是，模板已经定义了通用架构，使用者只需要关心自己需要实现的功能即可！非常的强大！</strong></p><h1 id="第二章-接口"><a href="#第二章-接口" class="headerlink" title="第二章 接口"></a>第二章 接口</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，已经构造器，成员变量等。那么什么是接口呢？<strong>接口是更加彻底的抽象，接口中全部是抽象方法。（JDK8之前），接口同样是不能创建对象的</strong>。</p><h2 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口的定义格式：</span>修饰符 <span class="token keyword">interface</span> 接口名称<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 修饰符：public|缺省</span><span class="token comment" spellcheck="true">// 接口的声明：interface</span><span class="token comment" spellcheck="true">// 接口名称：首字母大写，满足“驼峰模式”</span></code></pre><h2 id="2-3-接口成分的特点"><a href="#2-3-接口成分的特点" class="headerlink" title="2.3 接口成分的特点"></a>2.3 接口成分的特点</h2><p>  在JDK8之前，接口中的成分包含：抽象方法和常量</p><h3 id="2-3-1-抽象方法"><a href="#2-3-1-抽象方法" class="headerlink" title="2.3.1.抽象方法"></a>2.3.1.抽象方法</h3><p>​       注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！<br>​       按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h3 id="2-3-2-常量"><a href="#2-3-2-常量" class="headerlink" title="2.3.2 常量"></a>2.3.2 常量</h3><p> 在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h3 id="2-3-3-案例演示"><a href="#2-3-3-案例演示" class="headerlink" title="2.3.3 案例演示"></a>2.3.3 案例演示</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterF</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法！</span>    <span class="token comment" spellcheck="true">//    public abstract void run();</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    public abstract String getName();</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    public abstract int add(int a , int b);</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 它的最终写法是：</span>    <span class="token comment" spellcheck="true">// public static final int AGE = 12 ;</span>    <span class="token keyword">int</span> AGE  <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//常量</span>    String SCHOOL_NAME <span class="token operator">=</span> <span class="token string">"黑马程序员"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-基本的实现"><a href="#2-4-基本的实现" class="headerlink" title="2.4 基本的实现"></a>2.4 基本的实现</h2><h3 id="2-4-1-实现接口的概述"><a href="#2-4-1-实现接口的概述" class="headerlink" title="2.4.1 实现接口的概述"></a>2.4.1 实现接口的概述</h3><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h3 id="2-4-2-实现接口的格式"><a href="#2-4-2-实现接口的格式" class="headerlink" title="2.4.2 实现接口的格式"></a>2.4.2 实现接口的格式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**接口的实现：    在Java中接口是被实现的，实现接口的类称为实现类。    实现类的格式:*/</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口<span class="token number">1</span><span class="token punctuation">,</span>接口<span class="token number">2</span><span class="token punctuation">,</span>接口<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？</p><h3 id="2-4-3-类实现接口的要求和意义"><a href="#2-4-3-类实现接口的要求和意义" class="headerlink" title="2.4.3 类实现接口的要求和意义"></a>2.4.3 类实现接口的要求和意义</h3><ol><li>必须重写实现的全部接口中所有抽象方法。</li><li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li><li><strong>意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。</strong></li></ol><h3 id="2-4-4-类与接口基本实现案例"><a href="#2-4-4-类与接口基本实现案例" class="headerlink" title="2.4.4  类与接口基本实现案例"></a>2.4.4  类与接口基本实现案例</h3><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   接口：接口体现的是规范。 * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SportMan</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抽象方法，跑步。</span>    <span class="token keyword">void</span> <span class="token function">law</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抽象方法，遵守法律。</span>    String <span class="token function">compittion</span><span class="token punctuation">(</span>String project<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 抽象方法，比赛。</span><span class="token punctuation">}</span></code></pre><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>_03接口的实现<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 接口的实现： *    在Java中接口是被实现的，实现接口的类称为实现类。 *    实现类的格式: *      [修饰符] class 类名 implements 接口1,接口2,接口3...{ * * *      } * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingPongMan</span>  <span class="token keyword">implements</span> <span class="token class-name">SportMan</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员稍微跑一下！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">law</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员守法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">compittion</span><span class="token punctuation">(</span>String project<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"参加"</span><span class="token operator">+</span>project<span class="token operator">+</span><span class="token string">"得金牌！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试代码</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建实现类对象。</span>        PingPongMan zjk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingPongMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zjk<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zjk<span class="token punctuation">.</span><span class="token function">law</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zjk<span class="token punctuation">.</span><span class="token function">compittion</span><span class="token punctuation">(</span><span class="token string">"全球乒乓球比赛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-5-类与接口的多实现案例"><a href="#1-4-5-类与接口的多实现案例" class="headerlink" title="1.4.5 类与接口的多实现案例"></a>1.4.5 类与接口的多实现案例</h3><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 法律规范：接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Law</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 这一个运动员的规范：接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SportMan</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后定义一个实现类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Java中接口是可以被多实现的： *    一个类可以实现多个接口: Law ,SportMan * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JumpMan</span> <span class="token keyword">implements</span> <span class="token class-name">Law</span> <span class="token punctuation">,</span>SportMan <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尊长守法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"训练跑步！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h2 id="2-5-接口与接口的多继承"><a href="#2-5-接口与接口的多继承" class="headerlink" title="2.5 接口与接口的多继承"></a>2.5 接口与接口的多继承</h2><p>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：</p><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p><p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并。</p><p>案例演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Abc</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 法律规范：接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Law</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span> <span class="token operator">*</span>  总结： <span class="token operator">*</span>     接口与类之间是多实现的。 <span class="token operator">*</span>     接口与接口之间是多继承的。 <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SportMan</span> <span class="token keyword">extends</span> <span class="token class-name">Law</span> <span class="token punctuation">,</span> Abc <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-6-JDK-8之后的接口新增方法"><a href="#2-6-JDK-8之后的接口新增方法" class="headerlink" title="2.6 JDK 8之后的接口新增方法"></a>2.6 JDK 8之后的接口新增方法</h2><p>从JDK 8开始之后，接口不再纯洁了，接口中不再只是抽象方法，接口还可以有<strong>默认方法</strong>（也就是实例方法），和<strong>静态方法</strong>了，还包含了私有实例方法和私有静态方法</p><h3 id="2-6-1-含有默认方法和静态方法"><a href="#2-6-1-含有默认方法和静态方法" class="headerlink" title="2.6.1 含有默认方法和静态方法"></a>2.6.1 含有默认方法和静态方法</h3><p><strong>默认方法：使用 <code>default</code> 修饰，不可省略，供子类调用或者子类重写。</strong></p><p><strong>静态方法：使用 <code>static</code> 修饰，供接口直接调用。</strong></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-2-含有私有方法和私有静态方法"><a href="#2-6-2-含有私有方法和私有静态方法" class="headerlink" title="2.6.2 含有私有方法和私有静态方法"></a>2.6.2 含有私有方法和私有静态方法</h3><p>私有方法：使用 <code>private</code> 修饰，供接口中的默认方法或者静态方法调用。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceName</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-3-新增方法的使用"><a href="#2-6-3-新增方法的使用" class="headerlink" title="2.6.3 新增方法的使用"></a>2.6.3 新增方法的使用</h3><p><strong>默认方法和静态方法以及私有方法和私有静态方法</strong>，<strong>遵循面向对象的继承关系使用原则，实现类依然可以访问接口的非私有方法，对于接口中的非私有静态方法，可以直接通过接口名进行访问。</strong></p><p>重写默认方法注意（了解）:</p><ul><li><p>子接口重写默认方法时，default关键字可以保留。</p></li><li><p>实现类重写默认方法时，default关键字不可以保留。</p></li></ul><h2 id="2-7-实现多个接口使用注意事项"><a href="#2-7-实现多个接口使用注意事项" class="headerlink" title="2.7 实现多个接口使用注意事项"></a>2.7 实现多个接口使用注意事项</h2><h3 id="2-7-1-多个接口同名静态方法"><a href="#2-7-1-多个接口同名静态方法" class="headerlink" title="2.7.1 多个接口同名静态方法"></a>2.7.1 多个接口同名静态方法</h3><p>如果实现了多个接口，多个接口中存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span>  <span class="token class-name">A</span> <span class="token punctuation">,</span> B<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        People<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// C.test(); // 编译出错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-2-优先级的问题"><a href="#2-7-2-优先级的问题" class="headerlink" title="2.7.2 优先级的问题"></a>2.7.2 优先级的问题</h3><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAAAAAAAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义父类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DDDDDDDDDDDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义子类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 未重写methodA方法</span><span class="token punctuation">}</span></code></pre><p>定义测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>DDDDDDDDDDDD</code></pre><h2 id="2-8-接口小结"><a href="#2-8-接口小结" class="headerlink" title="2.8 接口小结"></a>2.8 接口小结</h2><ul><li>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。</li><li>接口中的方法全是抽象方法，默认会自动加上public abstract修饰</li><li>JDK 8开始，接口不再纯洁，支持静态方法，默认方法，私有方法。</li><li>接口中，没有构造器，<strong>不能创建对象</strong>。</li><li>类与接口是多实现的</li><li>接口与接口是多继承的</li><li>接口体现的规范。</li></ul><h1 id="第三章-代码块"><a href="#第三章-代码块" class="headerlink" title="第三章 代码块"></a>第三章 代码块</h1><h2 id="3-1-引入"><a href="#3-1-引入" class="headerlink" title="3.1 引入"></a>3.1 引入</h2><p>类的成分：<br>​    1.成员变量<br>​    2.构造器<br>​    3.成员方法<br>​    4.代码块<br>​    5.内部类</p><p>我们已经学完了成员变量，构造器，成员方法，接下来我们来介绍以下代码快，代码块按照有无static可以分为静态代码块和实例代码块。</p><h2 id="3-2-静态代码块"><a href="#3-2-静态代码块" class="headerlink" title="3.2 静态代码块"></a>3.2 静态代码块</h2><p><strong>静态代码块</strong><br>​         必须有static修饰，必须放在类下。与类一起加载执行。</p><p><strong>格式</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 执行代码</span><span class="token punctuation">}</span></code></pre><p><strong>特点</strong>：</p><ul><li>每次执行类，加载类的时候都会先执行静态代码块一次。</li><li>静态代码块是自动触发执行的，只要程序启动静态代码块就会先执行一次。</li><li>作用：在启动程序之前可以做资源的初始化，一般用于初始化静态资源。</li></ul><p><strong>案例演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaimaKuaiDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String sc_name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化静态资源</span>        sc_name <span class="token operator">=</span> <span class="token string">"黑马程序员！"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-实例代码块"><a href="#3-3-实例代码块" class="headerlink" title="3.3 实例代码块"></a>3.3 实例代码块</h2><p><strong>实例代码块</strong><br>​         没有static修饰，必须放在类下。与对象初始化一起加载。</p><p><strong>格式</strong></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 执行代码</span><span class="token punctuation">}</span></code></pre><p><strong>特点</strong>：</p><ul><li>无static修饰。属于对象，与对象的创建一起执行的。</li><li>每次调用构造器初始化对象，实例代码块都要自动触发执行一次。</li><li>实例代码块实际上是提取到每一个构造器中去执行的。</li><li>作用：实例代码块用于初始化对象的资源。</li></ul><p><strong>案例演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaimaKuaiDemo02</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例代码块。 无static修饰。</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例代码块执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token string">"dl"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">DaimaKuaiDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println("实例代码块执行");</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参数构造器</span>    <span class="token keyword">public</span> <span class="token function">DaimaKuaiDemo02</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println("实例代码块执行");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名对象，创建出来没有给变量。</span>        <span class="token keyword">new</span> <span class="token class-name">DaimaKuaiDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">DaimaKuaiDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">DaimaKuaiDemo02</span><span class="token punctuation">(</span><span class="token string">"xulei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出三次：实例代码块执行</span></code></pre><p>常用API</p><h1 id="第四章-final关键字"><a href="#第四章-final关键字" class="headerlink" title="第四章 final关键字"></a>第四章 final关键字</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承API中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写的情况，Java提供了<code>final</code> 关键字，用于修饰<strong>不可改变</strong>内容。</p><ul><li><strong>final</strong>：  不可改变，最终的含义。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，有且仅能被赋值一次。</li></ul></li></ul><h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><h3 id="4-2-1-修饰类"><a href="#4-2-1-修饰类" class="headerlink" title="4.2.1 修饰类"></a>4.2.1 修饰类</h3><p>final修饰的类，不能被继承。</p><p>格式如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// class Zi extends Fu {} // 报错,不能继承final的类</span></code></pre><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h3 id="4-2-2-修饰方法"><a href="#4-2-2-修饰方法" class="headerlink" title="4.2.2 修饰方法"></a>4.2.2 修饰方法</h3><p>final修饰的方法，不能被重写。<br>格式如下：</p><pre class=" language-java"><code class="language-java">修饰符 <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法体</span><span class="token punctuation">}</span></code></pre><p>代码: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu2</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fu2 show1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fu2 show2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Zi2</span> <span class="token keyword">extends</span> <span class="token class-name">Fu2</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @Override</span><span class="token comment" spellcheck="true">//    public void show1() {</span><span class="token comment" spellcheck="true">//        System.out.println("Zi2 show1");</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi2 show2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-3-修饰变量-局部变量"><a href="#4-2-3-修饰变量-局部变量" class="headerlink" title="4.2.3 修饰变量-局部变量"></a>4.2.3 修饰变量-局部变量</h3><ol><li><strong>局部变量——基本类型</strong><br>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 声明变量，使用final修饰</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一次赋值 </span>        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二次赋值</span>        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错,不可重新赋值</span>        <span class="token comment" spellcheck="true">// 声明变量，直接赋值，使用final修饰</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二次赋值</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错,不可重新赋值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>思考，如下两种写法，哪种可以通过编译？</p><p>写法1：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>写法2：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> c <span class="token operator">=</span> i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><h3 id="4-2-4-修饰变量-实例成员变量"><a href="#4-2-4-修饰变量-实例成员变量" class="headerlink" title="4.2.4 修饰变量-实例成员变量"></a>4.2.4 修饰变量-实例成员变量</h3><p>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造器初始化，只能选择其中一个：</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)；</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>构造器初始化(在构造器中赋值一次)。</p><p><strong>注意：每个构造器中都要赋值一次！</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     this.num2 = 20;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     this.num2 = 20;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote><h1 id="第五章-单例设计模式"><a href="#第五章-单例设计模式" class="headerlink" title="第五章 单例设计模式"></a>第五章 单例设计模式</h1><p>正常情况下一个类可以创建多个对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 正常情况下一个类可以创建多个对象</span>    Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-1-单例设计模式的作用"><a href="#5-1-单例设计模式的作用" class="headerlink" title="5.1 单例设计模式的作用"></a>5.1 单例设计模式的作用</h2><p>单例模式，是一种常用的软件设计模式。通过单例模式可以保证系统中，应用该模式的这个类只有一个实例。即一个类只有一个对象实例。</p><h2 id="5-2-单例设计模式实现步骤"><a href="#5-2-单例设计模式实现步骤" class="headerlink" title="5.2 单例设计模式实现步骤"></a>5.2 单例设计模式实现步骤</h2><ol><li><p>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</p></li><li><p>在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型的成员变量。</p></li><li><p>定义一个静态方法返回这个唯一对象。</p></li></ol><h2 id="5-3-单例设计模式的类型"><a href="#5-3-单例设计模式的类型" class="headerlink" title="5.3 单例设计模式的类型"></a>5.3 单例设计模式的类型</h2><p>根据实例化对象的时机单例设计模式又分为以下两种:</p><ol><li><p>饿汉单例设计模式</p></li><li><p>懒汉单例设计模式</p></li></ol><h2 id="5-4-饿汉单例设计模式"><a href="#5-4-饿汉单例设计模式" class="headerlink" title="5.4 饿汉单例设计模式"></a>5.4 饿汉单例设计模式</h2><p>饿汉单例设计模式就是使用类的时候已经将对象创建完毕，不管以后会不会使用到该实例化对象，先创建了再说。很着急的样子，故被称为“饿汉模式”。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型的成员变量。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.定义一个静态方法返回这个唯一对象。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5-5-懒汉单例设计模式"><a href="#5-5-懒汉单例设计模式" class="headerlink" title="5.5 懒汉单例设计模式"></a>5.5 懒汉单例设计模式</h2><p>懒汉单例设计模式就是调用getInstance()方法时实例才被创建，先不急着实例化出对象，等要用的时候才例化出对象。不着急，故称为“懒汉模式”。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型的成员变量。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.定义一个静态方法返回这个唯一对象。要用的时候才例化出对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：懒汉单例设计模式在多线程环境下可能会实例化出多个对象，不能保证单例的状态。我们在学习完多线程的时候还会再讲解如何解决这个问题。</p></blockquote><h2 id="5-6-小结"><a href="#5-6-小结" class="headerlink" title="5.6 小结"></a>5.6 小结</h2><p>单例模式可以保证系统中一个类只有一个对象实例。</p><p>实现单例模式的步骤：</p><ol><li>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li><li>在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型的成员变量。</li><li>定义一个静态方法返回这个唯一对象。</li></ol><h1 id="第六章-枚举"><a href="#第六章-枚举" class="headerlink" title="第六章 枚举"></a>第六章 枚举</h1><h2 id="6-1-不使用枚举存在的问题"><a href="#6-1-不使用枚举存在的问题" class="headerlink" title="6.1 不使用枚举存在的问题"></a>6.1 不使用枚举存在的问题</h2><p>假设我们要定义一个人类，人类中包含姓名和性别。通常会将性别定义成字符串类型，效果如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 省略get/set/toString方法</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为性别是字符串,所以我们可以传入任意字符串</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>不使用枚举存在的问题：可以给性别传入任意的字符串，导致性别是非法的数据，不安全。</p><h2 id="6-2-枚举的作用与应用场景"><a href="#6-2-枚举的作用与应用场景" class="headerlink" title="6.2 枚举的作用与应用场景"></a>6.2 枚举的作用与应用场景</h2><p>枚举的作用：一个方法接收的参数是固定范围之内的时候，那么即可使用枚举。</p><h2 id="6-3-枚举的基本语法"><a href="#6-3-枚举的基本语法" class="headerlink" title="6.3 枚举的基本语法"></a>6.3 枚举的基本语法</h2><h3 id="6-3-1-枚举的概念"><a href="#6-3-1-枚举的概念" class="headerlink" title="6.3.1 枚举的概念"></a>6.3.1 枚举的概念</h3><p>枚举是一种特殊类。枚举是有固定实例个数的类型，我们可以把枚举理解成有固定个数实例的多例模式。</p><h3 id="6-3-2-定义枚举的格式"><a href="#6-3-2-定义枚举的格式" class="headerlink" title="6.3.2 定义枚举的格式"></a>6.3.2 定义枚举的格式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> 枚举名 <span class="token punctuation">{</span>    第一行都是罗列枚举实例<span class="token punctuation">,</span>这些枚举实例直接写大写名字即可。<span class="token punctuation">}</span></code></pre><h3 id="6-3-3-入门案例"><a href="#6-3-3-入门案例" class="headerlink" title="6.3.3 入门案例"></a>6.3.3 入门案例</h3><ol><li>定义枚举：BOY表示男，GIRL表示女</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    BOY<span class="token punctuation">,</span> GIRL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 男，女</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>Perosn中的性别有String类型改为Sex枚举类型</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Sex sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Sex sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略get/set/toString方法</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>使用是只能传入枚举中的固定值</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> Sex<span class="token punctuation">.</span>BOY<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> Sex<span class="token punctuation">.</span>GIRL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-4-枚举的其他内容"><a href="#5-3-4-枚举的其他内容" class="headerlink" title="5.3.4 枚举的其他内容"></a>5.3.4 枚举的其他内容</h3><p>枚举的本质是一个类，我们刚才定义的Sex枚举最终效果如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    BOY<span class="token punctuation">,</span> GIRL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 男，女</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举的本质是一个类，我们刚才定义的Sex枚举相当于下面的类</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SEX</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Enum</span><span class="token operator">&lt;</span>SEX<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SEX BOY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SEX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SEX GIRL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SEX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SEX<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SEX <span class="token function">valueOf</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>枚举的本质是一个类，所以枚举中还可以有成员变量，成员方法等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    <span class="token function">BOY</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GIRL</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">Sex</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄是: "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> Sex<span class="token punctuation">.</span>BOY<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> Sex<span class="token punctuation">.</span>GIRL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Sex<span class="token punctuation">.</span>BOY<span class="token punctuation">.</span><span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sex<span class="token punctuation">.</span>GIRL<span class="token punctuation">.</span><span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-4-应用场景"><a href="#6-4-应用场景" class="headerlink" title="6.4 应用场景"></a>6.4 应用场景</h2><h2 id="6-5-枚举的应用"><a href="#6-5-枚举的应用" class="headerlink" title="6.5 枚举的应用"></a>6.5 枚举的应用</h2><p><strong>枚举的作用：枚举通常可以用于做信息的分类，如性别，方向，季度等。</strong></p><p>枚举表示性别：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    MAIL<span class="token punctuation">,</span> FEMAIL<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>枚举表示方向：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Orientation <span class="token punctuation">{</span>    UP<span class="token punctuation">,</span> RIGHT<span class="token punctuation">,</span> DOWN<span class="token punctuation">,</span> LEFT<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>枚举表示季度</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Season <span class="token punctuation">{</span>    SPRING<span class="token punctuation">,</span> SUMMER<span class="token punctuation">,</span> AUTUMN<span class="token punctuation">,</span> WINTER<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="6-6-小结"><a href="#6-6-小结" class="headerlink" title="6.6 小结"></a>6.6 小结</h2><ul><li>枚举类在第一行罗列若干个枚举对象。（多例）</li><li>第一行都是常量，存储的是枚举类的对象。</li><li>枚举是不能在外部创建对象的，枚举的构造器默认是私有的。</li><li>枚举通常用于做信息的标志和分类。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 【继承，引用类型使用】</title>
      <link href="/2021/091736523.html"/>
      <url>/2021/091736523.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java基础-【继承，引用类型使用】"><a href="#Java基础-【继承，引用类型使用】" class="headerlink" title="Java基础 【继承，引用类型使用】"></a>Java基础 【继承，引用类型使用】</h1><h2 id="第一章-继承"><a href="#第一章-继承" class="headerlink" title="第一章 继承"></a>第一章 继承</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>​        继承就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为</p><h3 id="1-2-继承的好处"><a href="#1-2-继承的好处" class="headerlink" title="1.2 继承的好处"></a>1.2 继承的好处</h3><pre><code>      1. 提高**代码的复用性**（减少代码冗余，相同代码重复利用）。      2. 使类与类之间产生了关系。</code></pre><h3 id="1-3-子类不能继承的内容"><a href="#1-3-子类不能继承的内容" class="headerlink" title="1.3 子类不能继承的内容"></a>1.3 子类不能继承的内容</h3><h4 id="1-3-1-引入"><a href="#1-3-1-引入" class="headerlink" title="1.3.1 引入"></a>1.3.1 引入</h4><p>并不是父类的所有内容都可以给子类继承的：</p><p><strong>子类不能继承父类的构造器，因为子类有自己的构造器。</strong></p><p><strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter/setter方法访问父类的private成员变量。</strong></p><h4 id="1-3-2-演示代码"><a href="#1-3-2-演示代码" class="headerlink" title="1.3.2 演示代码"></a>1.3.2 演示代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Zi z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(z.num2); // 私有的子类无法使用</span>        <span class="token comment" spellcheck="true">// 通过getter/setter方法访问父类的private成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">getNum2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// z.show2(); // 私有的子类无法使用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>小贴士：父类中的成员变量是非私有的，子类中可以直接访问。若父类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx()方法和setXxx()方法。</p></blockquote><h3 id="1-4-方法重写"><a href="#1-4-方法重写" class="headerlink" title="1.4 方法重写"></a>1.4 方法重写</h3><h4 id="1-4-1-概念"><a href="#1-4-1-概念" class="headerlink" title="1.4.1 概念"></a>1.4.1 概念</h4><p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p><h4 id="1-4-2使用场景与案例"><a href="#1-4-2使用场景与案例" class="headerlink" title="1.4.2使用场景与案例"></a>1.4.2使用场景与案例</h4><p>发生在子父类之间的关系。<br>子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。</p><p>例如：我们定义了一个动物类代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物跑的很快！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物都可以叫~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们一起学猫叫，喵喵喵！喵的非常好听！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建子类对象</span>          Cat ddm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 调用父类继承而来的方法</span>        ddm<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用子类重写的方法</span>          ddm<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-3-Override重写注解"><a href="#1-4-3-Override重写注解" class="headerlink" title="1.4.3 @Override重写注解"></a>1.4.3 @Override重写注解</h4><ul><li><p>@Override:注解，重写注解校验！</p></li><li><p>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</p></li><li><p>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</p><p>加上后的子类代码形式如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明不变，重新实现</span>    <span class="token comment" spellcheck="true">// 方法名称与父类全部一样，只是方法体中的功能重写写了！</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们一起学猫叫，喵喵喵！喵的非常好听！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="1-4-4-注意事项"><a href="#1-4-4-注意事项" class="headerlink" title="1.4.4 注意事项"></a>1.4.4 注意事项</h4><ol><li>方法重写是发生在子父类之间的关系。</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><h3 id="1-5-this与super"><a href="#1-5-this与super" class="headerlink" title="1.5 this与super"></a>1.5 this与super</h3><ul><li><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p></li><li><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p></li><li><p><strong>super(..)和this(…)是根据参数去确定调用父类哪个构造器的。</strong></p></li><li><p>super(..)可以调用父类构造器初始化继承自父类的成员变量的数据。</p></li><li><p>this(..)可以调用本类中的其他构造器。</p></li></ul><h2 id="第二章-引用类型使用总结"><a href="#第二章-引用类型使用总结" class="headerlink" title="第二章 引用类型使用总结"></a>第二章 引用类型使用总结</h2><p>实际的开发中，引用类型的使用非常重要，也是非常普遍的。我们可以在理解基本类型的使用方式基础上，进一步去掌握引用类型的使用方式。基本类型可以作为成员变量、作为方法的参数、作为方法的返回值，那么当然引用类型也是可以的。在这我们使用两个例子 , 来学习一下。</p><h3 id="2-1-引用类型作为方法参数和返回值"><a href="#2-1-引用类型作为方法参数和返回值" class="headerlink" title="2.1 引用类型作为方法参数和返回值"></a>2.1 引用类型作为方法参数和返回值</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Person p <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//引用类型作为方法参数,在前面笔记本案例中我们也使用了接口类型作为方法参数</span>  pubic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span>       p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//引用类型作为返回值</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Person <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-引用类型作为成员变量"><a href="#2-2-引用类型作为成员变量" class="headerlink" title="2.2 引用类型作为成员变量"></a>2.2 引用类型作为成员变量</h3><p>​    我们每个人(Person)都有一个身份证(IDCard) , 为了表示这种关系 , 就需要在Person中定义一个IDCard的成员变量。定义Person类时，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄</span><span class="token punctuation">}</span></code></pre><p>​    使用使用<code>String</code> 类型表示姓名 , <code>int</code> 类型表示年龄。其实，<code>String</code>本身就是引用类型，我们往往忽略了它是引用类型。如果我们继续丰富这个类的定义，给<code>Person</code> 增加身份证号 , 身份证签发机关等属性，我们将如何编写呢？这时候就需要编写一个IDCard类了</p><p>定义IDCard(身份证)类，添加身份证号 , 签发地等属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">{</span>    String idNum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//身份证号</span>    String authority<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签发地</span>        <span class="token comment" spellcheck="true">//getter和setter方法</span>      <span class="token comment" spellcheck="true">//...</span>            <span class="token comment" spellcheck="true">//toString方法</span>      <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>修改Person类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄</span>    IDCard idCard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示自己的身份证信息</span>    <span class="token comment" spellcheck="true">//name和age的getter、setter方法</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">public</span> IDCard <span class="token function">getIdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idCard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdCard</span><span class="token punctuation">(</span>IDCard idCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idCard <span class="token operator">=</span> idCard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", idCard="</span> <span class="token operator">+</span> idCard <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建IDCard对象</span>        IDCard idCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IDCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置身份证号</span>        idCard<span class="token punctuation">.</span><span class="token function">setIdNum</span><span class="token punctuation">(</span><span class="token string">"110113201606066666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置签发地</span>        idCard<span class="token punctuation">.</span><span class="token function">setAuthority</span><span class="token punctuation">(</span><span class="token string">"北京市顺义区公安局"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Person对象</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置姓名</span>        p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小顺子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置年龄</span>        p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置身份证信息</span>        p<span class="token punctuation">.</span><span class="token function">setIdCard</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印小顺子的信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>Person<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'小顺子'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> idCard<span class="token operator">=</span>IDCard<span class="token punctuation">{</span>idNum<span class="token operator">=</span><span class="token string">'110113201606066666'</span><span class="token punctuation">,</span> authority<span class="token operator">=</span><span class="token string">'北京市顺义区公安局'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/091615650.html"/>
      <url>/2021/091615650.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的博客文章编写"><a href="#我的博客文章编写" class="headerlink" title="我的博客文章编写"></a>我的博客文章编写</h1><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用标题时候需要写#  </p><p> 这是第一个段落  </p><p> 这是第二个段落  </p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>这是一段高亮显示  </p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p> <a href="www.baidu.com">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><hr><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/091516107.html"/>
      <url>/2021/091516107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
